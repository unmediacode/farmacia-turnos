---
import { monthGrid } from '@/lib/utils/date';
import dayjs from 'dayjs';
const { year, month0, counts = [] } = Astro.props as { year: number; month0: number; counts: Array<{ date: string; count: number }> };
const grid = monthGrid(year, month0);
const countMap = new Map(counts.map((c) => [c.date, Number((c as any).count ?? c.count)]));
const currentMonth = dayjs().year(year).month(month0).format('YYYY-MM');
---
<div class="grid grid-cols-7 gap-2">
  {['L', 'M', 'X', 'J', 'V', 'S', 'D'].map((d) => (
    <div class="text-xs font-medium text-slate-500 dark:text-slate-400 text-center">{d}</div>
  ))}
  {grid.map((date) => {
    const isCurrentMonth = date.startsWith(currentMonth);
    const dow = dayjs(date).day();
    const isWeekend = dow === 0 || dow === 6;
    const count = countMap.get(date) ?? 0;
    return (
      <a href={`/semana?d=${date}`} class={`rounded-md border p-2 min-h-24 flex flex-col justify-between ${isCurrentMonth ? 'bg-white dark:bg-slate-900' : 'bg-slate-50 dark:bg-slate-800'} ${isWeekend ? 'opacity-50' : ''} border-slate-200 dark:border-slate-700`}>
        <div class="text-sm">{dayjs(date).date()}</div>
        <div class="text-xs mt-2">
          <span class={`inline-flex items-center rounded px-2 py-0.5 text-xs ${count >= 10 ? 'bg-red-100 text-red-700 dark:bg-red-900/40 dark:text-red-300' : 'bg-slate-100 text-slate-700 dark:bg-slate-800 dark:text-slate-300'}`}>
            {count}/10
          </span>
        </div>
      </a>
    );
  })}
</div>
